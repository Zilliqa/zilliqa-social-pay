{"version":3,"sources":["components/container.tsx","config/size.ts","config/button-variants.ts","config/fonts.ts","config/font-colors.ts","config/position.ts","components/text.tsx","components/img.tsx","components/top-bar.tsx","components/left-bar.tsx","components/Input.tsx","pages/main.tsx","components/button.tsx","pages/auth.tsx","components/guide-container.tsx","pages/guide.tsx","app-routes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["FontSize","SizeComponent","ButtonVariants","Fonts","FontColors","Sides","Container","styled","div","props","area","Text","p","fontVariant","size","fontColors","nowrap","align","left","defaultProps","xs","AvenirNextLTProRegular","black","Img","img","header","gray","Input","input","sizeVariant","main","Button","button","variant","primary","AvenirNextLTProDemi","FormContainer","Center","LeftPanel","RightPanel","SignForm","TopImg","BottomImg","SignImg","AuthPage","history","handleContinue","React","useCallback","push","handleSuccess","res","window","test","console","log","handleFailed","Fragment","md","placeholder","loginUrl","onFailure","onSuccess","requestTokenUrl","showIcon","lg","onClick","src","Flex","TextInfo","IlluImage","GuideContainer","imgSrc","text","onNext","sm","CAROUSEL_PROPS","showArrows","showStatus","showThumbs","showIndicators","emulateTouch","useKeyboardArrows","SLIDES","CarouselStyle","createGlobalStyle","GuidePage","useState","selectedItem","setSelectedItem","handeNextSlide","index","length","onChange","map","sldie","key","AppRoutes","path","component","exact","GlobalStyle","AvenirNextLTProBold","AvenirNextLTProDemiIt","AvenirNextLTProHeavyCn","AvenirNextLTProIt","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f3e9ce51.chunk.js","sourcesContent":["import styled from 'styled-components';\n\ntype Prop = {\n  area?: string;\n}\n\nexport const Container = styled.div`\n  max-width: 100vw;\n\n  margin-right: auto;\n  margin-left:  auto;\n\n  ${(props: Prop) => props.area ? `grid-area: ${props.area};` : ''}\n`;\n","export enum FontSize {\n  xs = '10px',\n  sm = '15px',\n  md = '20px',\n  lg = '25px',\n  xl = '30px'\n}\n\nexport enum SizeComponent {\n  xs = '0.1rem',\n  sm = '0.3rem',\n  md = '0.5rem',\n  lg = '0.8rem',\n  xl = '1rem'\n}\n","export enum ButtonVariants {\n  primary = 'background: #29CCC4;color: #fff;',\n  success = 'background: #2FA84F;color: #fff;',\n  info = 'background: #00B2FF;color: #fff;',\n  danger = 'background: #FA5D50;color: #fff;',\n  warning = 'background: #057A8E;color: #fff;',\n  outlet = 'background: transparent; border: 1px solid #29CCC4;color: #242626;'\n};\n","export enum Fonts {\n  AvenirNextLTProBold = 'AvenirNextLTPro-Bold',\n  AvenirNextLTProDemi = 'AvenirNextLTPro-Demi',\n  AvenirNextLTProDemiIt = 'AvenirNextLTPro-DemiIt',\n  AvenirNextLTProHeavyCn = 'AvenirNextLTPro-HeavyCn',\n  AvenirNextLTProIt = 'AvenirNextLTPro-It',\n  AvenirNextLTProRegular = 'AvenirNextLTPro-Regular'\n}\n","export enum FontColors {\n  white = '#fff',\n  black = '#000',\n  primary = '#29CCC4',\n  success = '#2FA84F',\n  info = '#00B2FF',\n  danger = '#FA5D50',\n  gray = '#E5E5E5'\n}\n","export enum Sides {\n  left,\n  right,\n  center\n}\n","import styled from 'styled-components';\n\nimport { FontSize, Fonts, FontColors, Sides } from 'src/config';\n\ntype Prop = {\n  size?: FontSize | string;\n  fontVariant?: Fonts | string;\n  fontColors?: FontColors | string;\n  nowrap?: boolean;\n  align?: Sides;\n}\n\nexport const Text = styled.p`\n  font-family: ${(props: Prop) => props.fontVariant};\n  font-size: ${(props: Prop) => props.size};\n  color: ${(props: Prop) => props.fontColors};\n  white-space: ${(props: Prop) => props.nowrap ? 'nowrap' : 'normal'};\n  text-align: ${(props: Prop) => Sides[props.align || Sides.left]};\n\n  font-style: normal;\n  font-weight: normal;\n\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nText.defaultProps = {\n  size: FontSize.xs,\n  fontVariant: Fonts.AvenirNextLTProRegular,\n  fontColors: FontColors.black,\n  nowrap: false,\n  align: Sides.left\n};\n","import styled from 'styled-components';\n\nexport const Img = styled.img`\n  height: fit-content;\n  width: fit-content;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Text } from 'src/components/text';\nimport { Img } from 'src/components/img';\n\nimport { FontSize, Fonts, FontColors } from 'src/config';\n\nconst TopBarContainer = styled.header`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n\n  height: 60px;\n  width: 100%;\n  min-width: 300px;\n\n  border-bottom: 1px solid ${FontColors.gray};\n\n  grid-area: header;\n\n  padding-left: 15px;\n  padding-right: 15px;\n`;\nconst ProfileContainer = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 15px;\n  align-items: center;\n`;\nconst ProfileImg = styled(Img)`\n  border-radius: 50%;\n`;\n\ntype Prop = {\n  profileImg: string;\n  profileName: string;\n  zilAddress: string;\n}\n\nexport const TopBar: React.FC<Prop> = ({\n  zilAddress,\n  profileImg,\n  profileName\n}) => {\n  return (\n    <TopBarContainer>\n      <Text\n        size={FontSize.sm}\n        fontVariant={Fonts.AvenirNextLTProBold}\n        nowrap\n      >\n        {zilAddress}\n      </Text>\n      <ProfileContainer>\n        <ProfileImg src={profileImg}/>\n        <Text\n          size={FontSize.sm}\n          fontVariant={Fonts.AvenirNextLTProBold}\n          nowrap\n        >\n          {profileName}\n        </Text>\n      </ProfileContainer>\n    </TopBarContainer>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Container } from 'src/components/container';\nimport { Text } from 'src/components/text';\nimport { Img } from 'src/components/img';\n\nimport { FontSize, Fonts, FontColors, Sides } from 'src/config';\n\nconst LeftBarContainer = styled.header`\n  height: 100%;\n  width: 250px;\n\n  border-right: 1px solid ${FontColors.gray};\n\n  grid-area: left-bar;\n`;\nconst ProfileContainer = styled(Container)`\n  padding: 30px;\n\n  background: url(/imgs/circles.svg) no-repeat;\n`;\nconst ItemsContainer = styled(Container)`\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n\n  padding-left: 30px;\n  padding-right: 30px;\n  max-width: 150px;\n\n  cursor: pointer;\n`;\nconst ItemImg = styled(Img)`\n  height: 20px;\n  width: 20px;\n`;\n\ntype Prop = {\n  profileName: string;\n  items: {\n    img: string;\n    name: string;\n  }[];\n  onClick?: (index: number) => void;\n}\n\nexport const LeftBar: React.FC<Prop> = ({\n  profileName,\n  items,\n  onClick = () => null\n}) => {\n  return (\n    <LeftBarContainer>\n      <ProfileContainer>\n        <Text\n          size={FontSize.lg}\n          fontColors={FontColors.white}\n          fontVariant={Fonts.AvenirNextLTProBold}\n          align={Sides.center}\n        >\n          SocialPay\n        </Text>\n        <Text\n          size={FontSize.lg}\n          fontColors={FontColors.white}\n          fontVariant={Fonts.AvenirNextLTProDemi}\n          align={Sides.center}\n        >\n          Hello\n        </Text>\n        <Text\n          size={FontSize.md}\n          fontColors={FontColors.white}\n          fontVariant={Fonts.AvenirNextLTProRegular}\n          align={Sides.center}\n          nowrap\n        >\n          {profileName}\n        </Text>\n      </ProfileContainer>\n      {items.map((item, index) => (\n        <ItemsContainer\n          key={index}\n          onClick={() => onClick(index)}\n        >\n          <ItemImg\n            src={item.img}\n          />\n          <Text\n            size={FontSize.sm}\n            fontVariant={Fonts.AvenirNextLTProDemi}\n            align={Sides.left}\n          >\n            {item.name}\n          </Text>\n        </ItemsContainer>\n      ))}\n    </LeftBarContainer>\n  );\n};","import styled from 'styled-components';\n\nimport { SizeComponent, Fonts } from 'src/config';\n\ntype Prop = {\n  sizeVariant?: SizeComponent;\n  fontVariant?: Fonts | string;\n};\n\nexport const Input = styled.input`\n  font-family: ${(props: Prop) => props.fontVariant};\n  text-align: inherit;\n  font-size: inherit;\n  resize: none;\n  text-indent: 15px;\n\n  padding: ${(props: Prop) => props.sizeVariant};\n\n  width: 100%;\n  border: 0;\n\n  border-radius: 35px;\n  background: #E5E5E5;\n\n  transition: all .5s ease-out;\n\n  :focus {\n    outline: none;\n  }\n`;\n\nexport const Search = styled(Input)`\n  background: #ededed url(/icons/search-icon.svg) no-repeat 9px center;\n  text-align: center;\n`;\n\nInput.defaultProps = {\n  sizeVariant: SizeComponent.xs,\n  fontVariant: Fonts.AvenirNextLTProRegular\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Container } from 'src/components/container';\nimport { TopBar } from 'src/components/top-bar';\nimport { LeftBar } from 'src/components/left-bar';\nimport { Search } from 'src/components/Input';\n\nimport { SizeComponent } from 'src/config';\n\nconst LINKS = [\n  {\n    img: '/icons/twitter.svg',\n    name: 'Twittes'\n  },\n  {\n    img: '/icons/setup.svg',\n    name: 'Settings'\n  }\n];\n\nconst MainPageContainer = styled.main`\n  display: grid;\n  height: 100vh;\n  width: 100vw;\n\n  grid-template-columns: max-content;\n  grid-template-rows: max-content;\n  grid-template-areas: \"left-bar header\"\n                       \"left-bar container\";\n`;\n\nexport const MainPagePath = '/';\nexport const MainPage: React.FC = () => {\n  // const [address, setAddress] = React.useState();\n\n  // const handleLogin = React.useCallback(() => {\n  //   window.open(`http://localhost:4000/auth/twitter?address${address}`, \"_self\");\n  // }, [address]);\n  // const handleSignInClick = React.useCallback(() => {\n  //   window.open(\"http://localhost:4000/auth/logout\", \"_self\");\n  // }, []);\n  // const handleInput = React.useCallback((event) => {\n  //   const target = event.target as HTMLInputElement;\n\n  //   setAddress(target.value);\n  // }, [setAddress]);\n\n  return (\n    <MainPageContainer>\n      <LeftBar\n        items={LINKS}\n        profileName=\"warden\"\n      />\n      <TopBar\n        zilAddress=\"zil1zxvjnkxr3r0rv582rv7u0w07pnh0ap30td4thr\"\n        profileImg=\"/default_profile_normal.png\"\n        profileName=\"warden\"\n      />\n      <Container area=\"container\">\n        <Search\n          sizeVariant={SizeComponent.xl}\n          type=\"search\"\n        />\n      </Container>\n    </MainPageContainer>\n  );\n};\n\nexport default MainPage;\n","import styled from 'styled-components';\n\nimport { ButtonVariants, SizeComponent, Fonts } from 'src/config';\n\ntype Prop = {\n  variant?: ButtonVariants;\n  sizeVariant?: SizeComponent;\n  fontVariant?: Fonts | string;\n}\n\nexport const Button = styled.button`\n  cursor: pointer;\n\n  min-width: 100px;\n\n  border: 0;\n  border-radius: 30px;\n\n  font-family: ${(props: Prop) => props.fontVariant};\n  ${(props: Prop) => props.variant}\n  padding: ${(props: Prop) => props.sizeVariant};\n\n  :focus {\n    outline: none;\n  }\n`;\n\nButton.defaultProps = {\n  variant: ButtonVariants.primary,\n  sizeVariant: SizeComponent.xs,\n  fontVariant: Fonts.AvenirNextLTProDemi\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { History } from 'history';\nimport TwitterLogin from 'react-twitter-auth';\n\nimport { MainPagePath } from 'src/pages/main';\n\nimport { Img } from 'src/components/img';\nimport { Container } from 'src/components/container';\nimport { Input } from 'src/components/Input';\nimport { Button } from 'src/components/button';\n\nimport { SizeComponent } from 'src/config';\n\nconst FormContainer = styled(Container)`\n  display: grid;\n  justify-items: center;\n\n  width: 100vw;\n  height: 100vh;\n  z-index: 2;\n`;\nconst Center = styled(Container)`\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  margin: 10%;\n`;\nconst LeftPanel = styled(Container)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n\n  padding: 15px;\n  width: 40vw;\n  min-width: 300px;\n  background: #F5F5F5;\n  border-top-left-radius: 5px;\n  border-bottom-left-radius: 5px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n`;\nconst RightPanel = styled(Container)`\n  width: 40vw;\n  min-width: 300px;\n  border-top-right-radius: 5px;\n  background: #057A8E;\n`;\nconst SignForm = styled(Container)`\n  width: 100%;\n  max-width: 400px;\n  display: grid;\n  grid-gap: 30px;\n  justify-items: center;\n`;\nconst TopImg = styled(Img)`\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: -1;\n\n  width: 60%;\n  height: inherit;\n`;\nconst BottomImg = styled(Img)`\n  position: fixed;\n  bottom: 0;\n  right: 0;\n  z-index: -1;\n\n  width: 40%;\n  height: inherit;\n`;\nconst SignImg =  styled(Img)`\n  width: 100%;\n  height: inherit;\n`;\n\ntype Prop = {\n  history: History;\n}\n\nexport const AuthPagePath = '/auth';\nexport const AuthPage: React.SFC<Prop> = ({\n  history\n}) => {\n  const handleContinue = React.useCallback(() => {\n    history.push(MainPagePath);\n  }, [history]);\n  const handleSuccess = React.useCallback((res: any) => {\n    window.test = res;\n    console.log('handleSuccess', res);\n  }, []);\n  const handleFailed = React.useCallback(() => {\n    console.log('handleFailed');\n  }, []);\n\n  return (\n    <React.Fragment>\n      <FormContainer>\n        <Center>\n          <LeftPanel>\n            <SignForm>\n              <Input\n                sizeVariant={SizeComponent.md}\n                placeholder=\"Zilliqa address (zil1) or ZNS.\"\n              />\n              <TwitterLogin\n                loginUrl=\"http://localhost:4000/api/v1/auth/twitter\"\n                onFailure={handleFailed}\n                onSuccess={handleSuccess}\n                requestTokenUrl=\"http://localhost:4000/api/v1/auth/twitter/reverse\"\n                showIcon\n              />\n              <Button\n                sizeVariant={SizeComponent.lg}\n                onClick={handleContinue}\n              >\n                Continue\n              </Button>\n            </SignForm>\n          </LeftPanel>\n          <RightPanel>\n            <SignImg src=\"/imgs/sign.svg\"/>\n          </RightPanel>\n        </Center>\n      </FormContainer>\n      <TopImg src=\"/imgs/auth-2.svg\"/>\n      <BottomImg src=\"/imgs/auth-1.svg\"/>\n    </React.Fragment>\n  );\n}\n\nexport default AuthPage;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Text } from 'src/components/text';\nimport { Button } from 'src/components/button';\nimport { Img } from 'src/components/img';\n\nimport { FontSize, SizeComponent } from 'src/config';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  margin-top: 40px;\n`;\nconst Flex = styled.div`\n  display: flex;\n  justify-content: space-around;\n  flex-wrap: wrap;\n  align-items: baseline;\n\n  margin-top: 30px;\n\n  padding-left: 15px;\n  padding-right: 15px;\n\n  max-width: 600px;\n`;\nconst TextInfo = styled(Text)`\n  max-width: 400px;\n`;\nconst IlluImage = styled(Img)`\n  max-height: 400px;\n`;\n\ntype Prop = {\n  imgSrc: string;\n  text: string;\n  onNext?: () => void;\n}\n\nexport const GuideContainer: React.FC<Prop> = ({\n  imgSrc,\n  text,\n  onNext\n}) => {\n  return (\n    <Container>\n      <IlluImage src={imgSrc}/>\n      <Flex>\n        <TextInfo size={FontSize.sm}>\n          {text}\n        </TextInfo>\n        <Button\n          sizeVariant={SizeComponent.md}\n          onClick={onNext}\n        >\n          Next\n        </Button>\n      </Flex>\n    </Container>\n  );\n}\n\nexport default GuideContainer;\n","import 'react-responsive-carousel/lib/styles/carousel.min.css';\n\nimport React from 'react';\nimport { History } from 'history';\nimport { createGlobalStyle } from 'styled-components';\n\nimport { AuthPagePath } from 'src/pages/auth';\n\nimport { Carousel } from 'react-responsive-carousel';\nimport { GuideContainer } from 'src/components/guide-container'\n\nconst CAROUSEL_PROPS = {\n  showArrows: false,\n  showStatus: false,\n  showThumbs: false,\n  showIndicators: false,\n  emulateTouch: true,\n  useKeyboardArrows: true\n};\nconst SLIDES = [\n  {\n    img: 'guide-1.svg',\n    text: 'SocialPay is an innovative new solution that allows you to earn $ZIL by sharing social media updates on Twitter. To use SocialPay you need to login with your Twitter account and use specific hashtags in your tweets.'\n  },\n  {\n    img: 'guide-2.svg',\n    text: 'Every time you publish Zilliqa-related tweets, you are able to earn reward. These rewards can vary depending on the campaign Zilliqa is running. Make sure to always check out what campaign is running while you help Zilliqa grow!'\n  }\n];\n\nconst CarouselStyle = createGlobalStyle`\n  .carousel .slide {\n    background: transparent;\n  }\n`;\n\ntype Prop = {\n  history: History;\n}\n\nexport const GuidePagePath = '/guide';\nexport const GuidePage: React.SFC<Prop> = ({\n  history\n}) => {\n  const [selectedItem, setSelectedItem] = React.useState<number>(0);\n\n  const handeNextSlide = React.useCallback((index: number) => {\n    if (index < SLIDES.length) {\n      setSelectedItem(index);\n\n      return null;\n    }\n\n    history.push(AuthPagePath);\n  }, [setSelectedItem, history]);\n\n  return (\n    <React.Fragment>\n      <Carousel\n        {...CAROUSEL_PROPS}\n        selectedItem={selectedItem}\n        onChange={setSelectedItem}\n      >\n        {SLIDES.map((sldie, index) => (\n          <GuideContainer\n            key={index}\n            imgSrc={`/imgs/${sldie.img}`}\n            text={sldie.text}\n            onNext={() => handeNextSlide(index + 1)}\n          />\n        ))}\n      </Carousel>\n      <CarouselStyle />\n    </React.Fragment>\n  );\n}\n\nexport default GuidePage;\n","import React from 'react';\nimport { Switch, Route } from 'react-router';\n\nimport { AuthPage, AuthPagePath } from 'src/pages/auth';\nimport { MainPage, MainPagePath } from 'src/pages/main';\nimport { GuidePage, GuidePagePath } from 'src/pages/guide';\n\nexport const AppRoutes: React.FC = () => (\n  <Switch>\n    <Route\n      path={GuidePagePath}\n      component={GuidePage}\n      exact\n    />\n    <Route\n      path={AuthPagePath}\n      component={AuthPage}\n      exact\n    />\n    <Route\n      path={MainPagePath}\n      component={AuthPage}\n      exact\n    />\n  </Switch>\n);\n\nexport default AppRoutes;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { createGlobalStyle } from 'styled-components'\n\nimport { AppRoutes } from 'src/app-routes';\n\nimport { Fonts } from 'src/config';\n\nconst GlobalStyle = createGlobalStyle`\n  @font-face {\n    font-family: ${Fonts.AvenirNextLTProBold};\n    src: url('/fonts/AvenirNextLTPro-Bold.otf');\n  }\n  @font-face {\n    font-family: ${Fonts.AvenirNextLTProDemi};\n    src: url('/fonts/AvenirNextLTPro-Demi.otf');\n  }\n  @font-face {\n    font-family: ${Fonts.AvenirNextLTProDemiIt};\n    src: url('/fonts/AvenirNextLTPro-DemiIt.otf');\n  }\n  @font-face {\n    font-family: ${Fonts.AvenirNextLTProHeavyCn};\n    src: url('/fonts/AvenirNextLTPro-HeavyCn.otf');\n  }\n  @font-face {\n    font-family: ${Fonts.AvenirNextLTProIt};\n    src: url('/fonts/AvenirNextLTPro-It.otf');\n  }\n  @font-face {\n    font-family: ${Fonts.AvenirNextLTProRegular};\n    src: url('/fonts/AvenirNextLTPro-Regular.otf');\n  }\n\n  body, html {\n    margin: 0;\n    padding: 0;\n\n    font-family: ${Fonts.AvenirNextLTProRegular};\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n`\n\nexport const App: React.FC = () => {\n  return (\n    <React.Fragment>\n      <BrowserRouter>\n        <AppRoutes />\n      </BrowserRouter>\n      <GlobalStyle />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // tslint:disable-next-line: no-console\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker === null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // tslint:disable-next-line: no-console\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // tslint:disable-next-line: no-console\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        // tslint:disable-next-line: no-magic-numbers\n        response.status === 404 ||\n        (contentType !== null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      // tslint:disable-next-line: no-console\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}